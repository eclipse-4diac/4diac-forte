// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file CancelGoal.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "CancelGoal.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

#define builtin_interfaces_msg_Time_max_cdr_typesize 8ULL;
#define unique_identifier_msgs_msg_UUID_max_cdr_typesize 17ULL;

#define action_msgs_msg_GoalInfo_max_cdr_typesize 28ULL;
#define action_msgs_srv_CancelGoal_Request_max_cdr_typesize 28ULL;
#define action_msgs_srv_CancelGoal_Response_max_cdr_typesize 2808ULL;
#define builtin_interfaces_msg_Time_max_key_cdr_typesize 0ULL;
#define unique_identifier_msgs_msg_UUID_max_key_cdr_typesize 0ULL;

#define action_msgs_msg_GoalInfo_max_key_cdr_typesize 0ULL;
#define action_msgs_srv_CancelGoal_Request_max_key_cdr_typesize 0ULL;
#define action_msgs_srv_CancelGoal_Response_max_key_cdr_typesize 0ULL;

action_msgs::srv::CancelGoal_Request::CancelGoal_Request()
{
    // action_msgs::msg::GoalInfo m_goal_info


}

action_msgs::srv::CancelGoal_Request::~CancelGoal_Request()
{
}

action_msgs::srv::CancelGoal_Request::CancelGoal_Request(
        const CancelGoal_Request& x)
{
    m_goal_info = x.m_goal_info;
}

action_msgs::srv::CancelGoal_Request::CancelGoal_Request(
        CancelGoal_Request&& x) noexcept 
{
    m_goal_info = std::move(x.m_goal_info);
}

action_msgs::srv::CancelGoal_Request& action_msgs::srv::CancelGoal_Request::operator =(
        const CancelGoal_Request& x)
{

    m_goal_info = x.m_goal_info;

    return *this;
}

action_msgs::srv::CancelGoal_Request& action_msgs::srv::CancelGoal_Request::operator =(
        CancelGoal_Request&& x) noexcept
{

    m_goal_info = std::move(x.m_goal_info);

    return *this;
}

bool action_msgs::srv::CancelGoal_Request::operator ==(
        const CancelGoal_Request& x) const
{

    return (m_goal_info == x.m_goal_info);
}

bool action_msgs::srv::CancelGoal_Request::operator !=(
        const CancelGoal_Request& x) const
{
    return !(*this == x);
}

size_t action_msgs::srv::CancelGoal_Request::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return action_msgs_srv_CancelGoal_Request_max_cdr_typesize;
}

size_t action_msgs::srv::CancelGoal_Request::getCdrSerializedSize(
        const action_msgs::srv::CancelGoal_Request& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += action_msgs::msg::GoalInfo::getCdrSerializedSize(data.goal_info(), current_alignment);

    return current_alignment - initial_alignment;
}

void action_msgs::srv::CancelGoal_Request::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_goal_info;

}

void action_msgs::srv::CancelGoal_Request::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_goal_info;
}

/*!
 * @brief This function copies the value in member goal_info
 * @param _goal_info New value to be copied in member goal_info
 */
void action_msgs::srv::CancelGoal_Request::goal_info(
        const action_msgs::msg::GoalInfo& _goal_info)
{
    m_goal_info = _goal_info;
}

/*!
 * @brief This function moves the value in member goal_info
 * @param _goal_info New value to be moved in member goal_info
 */
void action_msgs::srv::CancelGoal_Request::goal_info(
        action_msgs::msg::GoalInfo&& _goal_info)
{
    m_goal_info = std::move(_goal_info);
}

/*!
 * @brief This function returns a constant reference to member goal_info
 * @return Constant reference to member goal_info
 */
const action_msgs::msg::GoalInfo& action_msgs::srv::CancelGoal_Request::goal_info() const
{
    return m_goal_info;
}

/*!
 * @brief This function returns a reference to member goal_info
 * @return Reference to member goal_info
 */
action_msgs::msg::GoalInfo& action_msgs::srv::CancelGoal_Request::goal_info()
{
    return m_goal_info;
}


size_t action_msgs::srv::CancelGoal_Request::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return action_msgs_srv_CancelGoal_Request_max_key_cdr_typesize;
}

bool action_msgs::srv::CancelGoal_Request::isKeyDefined()
{
    return false;
}

void action_msgs::srv::CancelGoal_Request::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}






action_msgs::srv::CancelGoal_Response::CancelGoal_Response()
{
    // int8 m_return_code
    m_return_code = 0;
    // sequence<action_msgs::msg::GoalInfo> m_goals_canceling


}

action_msgs::srv::CancelGoal_Response::~CancelGoal_Response()
{


}

action_msgs::srv::CancelGoal_Response::CancelGoal_Response(
        const CancelGoal_Response& x)
{
    m_return_code = x.m_return_code;
    m_goals_canceling = x.m_goals_canceling;
}

action_msgs::srv::CancelGoal_Response::CancelGoal_Response(
        CancelGoal_Response&& x) noexcept 
{
    m_return_code = x.m_return_code;
    m_goals_canceling = std::move(x.m_goals_canceling);
}

action_msgs::srv::CancelGoal_Response& action_msgs::srv::CancelGoal_Response::operator =(
        const CancelGoal_Response& x)
{

    m_return_code = x.m_return_code;
    m_goals_canceling = x.m_goals_canceling;

    return *this;
}

action_msgs::srv::CancelGoal_Response& action_msgs::srv::CancelGoal_Response::operator =(
        CancelGoal_Response&& x) noexcept
{

    m_return_code = x.m_return_code;
    m_goals_canceling = std::move(x.m_goals_canceling);

    return *this;
}

bool action_msgs::srv::CancelGoal_Response::operator ==(
        const CancelGoal_Response& x) const
{

    return (m_return_code == x.m_return_code && m_goals_canceling == x.m_goals_canceling);
}

bool action_msgs::srv::CancelGoal_Response::operator !=(
        const CancelGoal_Response& x) const
{
    return !(*this == x);
}

size_t action_msgs::srv::CancelGoal_Response::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return action_msgs_srv_CancelGoal_Response_max_cdr_typesize;
}

size_t action_msgs::srv::CancelGoal_Response::getCdrSerializedSize(
        const action_msgs::srv::CancelGoal_Response& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < data.goals_canceling().size(); ++a)
    {
        current_alignment += action_msgs::msg::GoalInfo::getCdrSerializedSize(data.goals_canceling().at(a), current_alignment);}


    return current_alignment - initial_alignment;
}

void action_msgs::srv::CancelGoal_Response::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_return_code;
    scdr << m_goals_canceling;

}

void action_msgs::srv::CancelGoal_Response::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_return_code;
    dcdr >> m_goals_canceling;
}

/*!
 * @brief This function sets a value in member return_code
 * @param _return_code New value for member return_code
 */
void action_msgs::srv::CancelGoal_Response::return_code(
        int8_t _return_code)
{
    m_return_code = _return_code;
}

/*!
 * @brief This function returns the value of member return_code
 * @return Value of member return_code
 */
int8_t action_msgs::srv::CancelGoal_Response::return_code() const
{
    return m_return_code;
}

/*!
 * @brief This function returns a reference to member return_code
 * @return Reference to member return_code
 */
int8_t& action_msgs::srv::CancelGoal_Response::return_code()
{
    return m_return_code;
}

/*!
 * @brief This function copies the value in member goals_canceling
 * @param _goals_canceling New value to be copied in member goals_canceling
 */
void action_msgs::srv::CancelGoal_Response::goals_canceling(
        const std::vector<action_msgs::msg::GoalInfo>& _goals_canceling)
{
    m_goals_canceling = _goals_canceling;
}

/*!
 * @brief This function moves the value in member goals_canceling
 * @param _goals_canceling New value to be moved in member goals_canceling
 */
void action_msgs::srv::CancelGoal_Response::goals_canceling(
        std::vector<action_msgs::msg::GoalInfo>&& _goals_canceling)
{
    m_goals_canceling = std::move(_goals_canceling);
}

/*!
 * @brief This function returns a constant reference to member goals_canceling
 * @return Constant reference to member goals_canceling
 */
const std::vector<action_msgs::msg::GoalInfo>& action_msgs::srv::CancelGoal_Response::goals_canceling() const
{
    return m_goals_canceling;
}

/*!
 * @brief This function returns a reference to member goals_canceling
 * @return Reference to member goals_canceling
 */
std::vector<action_msgs::msg::GoalInfo>& action_msgs::srv::CancelGoal_Response::goals_canceling()
{
    return m_goals_canceling;
}


size_t action_msgs::srv::CancelGoal_Response::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return action_msgs_srv_CancelGoal_Response_max_key_cdr_typesize;
}

bool action_msgs::srv::CancelGoal_Response::isKeyDefined()
{
    return false;
}

void action_msgs::srv::CancelGoal_Response::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


