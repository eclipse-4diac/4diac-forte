// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file CancelGoal.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _FAST_DDS_GENERATED_ACTION_MSGS_SRV_CANCELGOAL_H_
#define _FAST_DDS_GENERATED_ACTION_MSGS_SRV_CANCELGOAL_H_

#include "GoalInfo.h"

#include <fastrtps/utils/fixed_size_string.hpp>

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(CancelGoal_SOURCE)
#define CancelGoal_DllAPI __declspec( dllexport )
#else
#define CancelGoal_DllAPI __declspec( dllimport )
#endif // CancelGoal_SOURCE
#else
#define CancelGoal_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define CancelGoal_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima


namespace action_msgs {
    namespace srv {
        /*!
         * @brief This class represents the structure CancelGoal_Request defined by the user in the IDL file.
         * @ingroup CANCELGOAL
         */
        class CancelGoal_Request
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport CancelGoal_Request();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~CancelGoal_Request();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object action_msgs::srv::CancelGoal_Request that will be copied.
             */
            eProsima_user_DllExport CancelGoal_Request(
                    const CancelGoal_Request& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object action_msgs::srv::CancelGoal_Request that will be copied.
             */
            eProsima_user_DllExport CancelGoal_Request(
                    CancelGoal_Request&& x) noexcept;

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object action_msgs::srv::CancelGoal_Request that will be copied.
             */
            eProsima_user_DllExport CancelGoal_Request& operator =(
                    const CancelGoal_Request& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object action_msgs::srv::CancelGoal_Request that will be copied.
             */
            eProsima_user_DllExport CancelGoal_Request& operator =(
                    CancelGoal_Request&& x) noexcept;

            /*!
             * @brief Comparison operator.
             * @param x action_msgs::srv::CancelGoal_Request object to compare.
             */
            eProsima_user_DllExport bool operator ==(
                    const CancelGoal_Request& x) const;

            /*!
             * @brief Comparison operator.
             * @param x action_msgs::srv::CancelGoal_Request object to compare.
             */
            eProsima_user_DllExport bool operator !=(
                    const CancelGoal_Request& x) const;

            /*!
             * @brief This function copies the value in member goal_info
             * @param _goal_info New value to be copied in member goal_info
             */
            eProsima_user_DllExport void goal_info(
                    const action_msgs::msg::GoalInfo& _goal_info);

            /*!
             * @brief This function moves the value in member goal_info
             * @param _goal_info New value to be moved in member goal_info
             */
            eProsima_user_DllExport void goal_info(
                    action_msgs::msg::GoalInfo&& _goal_info);

            /*!
             * @brief This function returns a constant reference to member goal_info
             * @return Constant reference to member goal_info
             */
            eProsima_user_DllExport const action_msgs::msg::GoalInfo& goal_info() const;

            /*!
             * @brief This function returns a reference to member goal_info
             * @return Reference to member goal_info
             */
            eProsima_user_DllExport action_msgs::msg::GoalInfo& goal_info();

            /*!
            * @brief This function returns the maximum serialized size of an object
            * depending on the buffer alignment.
            * @param current_alignment Buffer alignment.
            * @return Maximum serialized size.
            */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const action_msgs::srv::CancelGoal_Request& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            action_msgs::msg::GoalInfo m_goal_info;

        };
        namespace CancelGoal_Response_Constants {
            const int8_t ERROR_NONE = 0;
            const int8_t ERROR_REJECTED = 1;
            const int8_t ERROR_UNKNOWN_GOAL_ID = 2;
            const int8_t ERROR_GOAL_TERMINATED = 3;
        } // namespace CancelGoal_Response_Constants
        /*!
         * @brief This class represents the structure CancelGoal_Response defined by the user in the IDL file.
         * @ingroup CANCELGOAL
         */
        class CancelGoal_Response
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport CancelGoal_Response();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~CancelGoal_Response();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object action_msgs::srv::CancelGoal_Response that will be copied.
             */
            eProsima_user_DllExport CancelGoal_Response(
                    const CancelGoal_Response& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object action_msgs::srv::CancelGoal_Response that will be copied.
             */
            eProsima_user_DllExport CancelGoal_Response(
                    CancelGoal_Response&& x) noexcept;

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object action_msgs::srv::CancelGoal_Response that will be copied.
             */
            eProsima_user_DllExport CancelGoal_Response& operator =(
                    const CancelGoal_Response& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object action_msgs::srv::CancelGoal_Response that will be copied.
             */
            eProsima_user_DllExport CancelGoal_Response& operator =(
                    CancelGoal_Response&& x) noexcept;

            /*!
             * @brief Comparison operator.
             * @param x action_msgs::srv::CancelGoal_Response object to compare.
             */
            eProsima_user_DllExport bool operator ==(
                    const CancelGoal_Response& x) const;

            /*!
             * @brief Comparison operator.
             * @param x action_msgs::srv::CancelGoal_Response object to compare.
             */
            eProsima_user_DllExport bool operator !=(
                    const CancelGoal_Response& x) const;

            /*!
             * @brief This function sets a value in member return_code
             * @param _return_code New value for member return_code
             */
            eProsima_user_DllExport void return_code(
                    int8_t _return_code);

            /*!
             * @brief This function returns the value of member return_code
             * @return Value of member return_code
             */
            eProsima_user_DllExport int8_t return_code() const;

            /*!
             * @brief This function returns a reference to member return_code
             * @return Reference to member return_code
             */
            eProsima_user_DllExport int8_t& return_code();

            /*!
             * @brief This function copies the value in member goals_canceling
             * @param _goals_canceling New value to be copied in member goals_canceling
             */
            eProsima_user_DllExport void goals_canceling(
                    const std::vector<action_msgs::msg::GoalInfo>& _goals_canceling);

            /*!
             * @brief This function moves the value in member goals_canceling
             * @param _goals_canceling New value to be moved in member goals_canceling
             */
            eProsima_user_DllExport void goals_canceling(
                    std::vector<action_msgs::msg::GoalInfo>&& _goals_canceling);

            /*!
             * @brief This function returns a constant reference to member goals_canceling
             * @return Constant reference to member goals_canceling
             */
            eProsima_user_DllExport const std::vector<action_msgs::msg::GoalInfo>& goals_canceling() const;

            /*!
             * @brief This function returns a reference to member goals_canceling
             * @return Reference to member goals_canceling
             */
            eProsima_user_DllExport std::vector<action_msgs::msg::GoalInfo>& goals_canceling();

            /*!
            * @brief This function returns the maximum serialized size of an object
            * depending on the buffer alignment.
            * @param current_alignment Buffer alignment.
            * @return Maximum serialized size.
            */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const action_msgs::srv::CancelGoal_Response& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            int8_t m_return_code;
            std::vector<action_msgs::msg::GoalInfo> m_goals_canceling;

        };
    } // namespace srv
} // namespace action_msgs

#endif // _FAST_DDS_GENERATED_ACTION_MSGS_SRV_CANCELGOAL_H_