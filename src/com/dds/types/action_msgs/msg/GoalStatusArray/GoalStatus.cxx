// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file GoalStatus.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "GoalStatus.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

#define action_msgs_msg_GoalStatus_max_cdr_typesize 29ULL;
#define builtin_interfaces_msg_Time_max_cdr_typesize 8ULL;
#define unique_identifier_msgs_msg_UUID_max_cdr_typesize 17ULL;

#define action_msgs_msg_GoalInfo_max_cdr_typesize 28ULL;
#define action_msgs_msg_GoalStatus_max_key_cdr_typesize 0ULL;
#define builtin_interfaces_msg_Time_max_key_cdr_typesize 0ULL;
#define unique_identifier_msgs_msg_UUID_max_key_cdr_typesize 0ULL;

#define action_msgs_msg_GoalInfo_max_key_cdr_typesize 0ULL;









action_msgs::msg::GoalStatus::GoalStatus()
{
    // action_msgs::msg::GoalInfo m_goal_info

    // int8 m_status
    m_status = 0;

}

action_msgs::msg::GoalStatus::~GoalStatus()
{


}

action_msgs::msg::GoalStatus::GoalStatus(
        const GoalStatus& x)
{
    m_goal_info = x.m_goal_info;
    m_status = x.m_status;
}

action_msgs::msg::GoalStatus::GoalStatus(
        GoalStatus&& x) noexcept 
{
    m_goal_info = std::move(x.m_goal_info);
    m_status = x.m_status;
}

action_msgs::msg::GoalStatus& action_msgs::msg::GoalStatus::operator =(
        const GoalStatus& x)
{

    m_goal_info = x.m_goal_info;
    m_status = x.m_status;

    return *this;
}

action_msgs::msg::GoalStatus& action_msgs::msg::GoalStatus::operator =(
        GoalStatus&& x) noexcept
{

    m_goal_info = std::move(x.m_goal_info);
    m_status = x.m_status;

    return *this;
}

bool action_msgs::msg::GoalStatus::operator ==(
        const GoalStatus& x) const
{

    return (m_goal_info == x.m_goal_info && m_status == x.m_status);
}

bool action_msgs::msg::GoalStatus::operator !=(
        const GoalStatus& x) const
{
    return !(*this == x);
}

size_t action_msgs::msg::GoalStatus::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return action_msgs_msg_GoalStatus_max_cdr_typesize;
}

size_t action_msgs::msg::GoalStatus::getCdrSerializedSize(
        const action_msgs::msg::GoalStatus& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += action_msgs::msg::GoalInfo::getCdrSerializedSize(data.goal_info(), current_alignment);
    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

void action_msgs::msg::GoalStatus::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_goal_info;
    scdr << m_status;

}

void action_msgs::msg::GoalStatus::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_goal_info;
    dcdr >> m_status;
}

/*!
 * @brief This function copies the value in member goal_info
 * @param _goal_info New value to be copied in member goal_info
 */
void action_msgs::msg::GoalStatus::goal_info(
        const action_msgs::msg::GoalInfo& _goal_info)
{
    m_goal_info = _goal_info;
}

/*!
 * @brief This function moves the value in member goal_info
 * @param _goal_info New value to be moved in member goal_info
 */
void action_msgs::msg::GoalStatus::goal_info(
        action_msgs::msg::GoalInfo&& _goal_info)
{
    m_goal_info = std::move(_goal_info);
}

/*!
 * @brief This function returns a constant reference to member goal_info
 * @return Constant reference to member goal_info
 */
const action_msgs::msg::GoalInfo& action_msgs::msg::GoalStatus::goal_info() const
{
    return m_goal_info;
}

/*!
 * @brief This function returns a reference to member goal_info
 * @return Reference to member goal_info
 */
action_msgs::msg::GoalInfo& action_msgs::msg::GoalStatus::goal_info()
{
    return m_goal_info;
}
/*!
 * @brief This function sets a value in member status
 * @param _status New value for member status
 */
void action_msgs::msg::GoalStatus::status(
        int8_t _status)
{
    m_status = _status;
}

/*!
 * @brief This function returns the value of member status
 * @return Value of member status
 */
int8_t action_msgs::msg::GoalStatus::status() const
{
    return m_status;
}

/*!
 * @brief This function returns a reference to member status
 * @return Reference to member status
 */
int8_t& action_msgs::msg::GoalStatus::status()
{
    return m_status;
}



size_t action_msgs::msg::GoalStatus::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return action_msgs_msg_GoalStatus_max_key_cdr_typesize;
}

bool action_msgs::msg::GoalStatus::isKeyDefined()
{
    return false;
}

void action_msgs::msg::GoalStatus::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


