// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file GoalStatusArray.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "GoalStatusArray.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

#define action_msgs_msg_GoalStatus_max_cdr_typesize 29ULL;
#define builtin_interfaces_msg_Time_max_cdr_typesize 8ULL;
#define unique_identifier_msgs_msg_UUID_max_cdr_typesize 17ULL;

#define action_msgs_msg_GoalInfo_max_cdr_typesize 28ULL;
#define action_msgs_msg_GoalStatusArray_max_cdr_typesize 2805ULL;
#define action_msgs_msg_GoalStatus_max_key_cdr_typesize 0ULL;
#define builtin_interfaces_msg_Time_max_key_cdr_typesize 0ULL;
#define unique_identifier_msgs_msg_UUID_max_key_cdr_typesize 0ULL;

#define action_msgs_msg_GoalInfo_max_key_cdr_typesize 0ULL;
#define action_msgs_msg_GoalStatusArray_max_key_cdr_typesize 0ULL;

action_msgs::msg::GoalStatusArray::GoalStatusArray()
{
    // sequence<action_msgs::msg::GoalStatus> m_status_list


}

action_msgs::msg::GoalStatusArray::~GoalStatusArray()
{
}

action_msgs::msg::GoalStatusArray::GoalStatusArray(
        const GoalStatusArray& x)
{
    m_status_list = x.m_status_list;
}

action_msgs::msg::GoalStatusArray::GoalStatusArray(
        GoalStatusArray&& x) noexcept 
{
    m_status_list = std::move(x.m_status_list);
}

action_msgs::msg::GoalStatusArray& action_msgs::msg::GoalStatusArray::operator =(
        const GoalStatusArray& x)
{

    m_status_list = x.m_status_list;

    return *this;
}

action_msgs::msg::GoalStatusArray& action_msgs::msg::GoalStatusArray::operator =(
        GoalStatusArray&& x) noexcept
{

    m_status_list = std::move(x.m_status_list);

    return *this;
}

bool action_msgs::msg::GoalStatusArray::operator ==(
        const GoalStatusArray& x) const
{

    return (m_status_list == x.m_status_list);
}

bool action_msgs::msg::GoalStatusArray::operator !=(
        const GoalStatusArray& x) const
{
    return !(*this == x);
}

size_t action_msgs::msg::GoalStatusArray::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return action_msgs_msg_GoalStatusArray_max_cdr_typesize;
}

size_t action_msgs::msg::GoalStatusArray::getCdrSerializedSize(
        const action_msgs::msg::GoalStatusArray& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < data.status_list().size(); ++a)
    {
        current_alignment += action_msgs::msg::GoalStatus::getCdrSerializedSize(data.status_list().at(a), current_alignment);}

    return current_alignment - initial_alignment;
}

void action_msgs::msg::GoalStatusArray::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_status_list;
}

void action_msgs::msg::GoalStatusArray::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_status_list;}

/*!
 * @brief This function copies the value in member status_list
 * @param _status_list New value to be copied in member status_list
 */
void action_msgs::msg::GoalStatusArray::status_list(
        const std::vector<action_msgs::msg::GoalStatus>& _status_list)
{
    m_status_list = _status_list;
}

/*!
 * @brief This function moves the value in member status_list
 * @param _status_list New value to be moved in member status_list
 */
void action_msgs::msg::GoalStatusArray::status_list(
        std::vector<action_msgs::msg::GoalStatus>&& _status_list)
{
    m_status_list = std::move(_status_list);
}

/*!
 * @brief This function returns a constant reference to member status_list
 * @return Constant reference to member status_list
 */
const std::vector<action_msgs::msg::GoalStatus>& action_msgs::msg::GoalStatusArray::status_list() const
{
    return m_status_list;
}

/*!
 * @brief This function returns a reference to member status_list
 * @return Reference to member status_list
 */
std::vector<action_msgs::msg::GoalStatus>& action_msgs::msg::GoalStatusArray::status_list()
{
    return m_status_list;
}


size_t action_msgs::msg::GoalStatusArray::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return action_msgs_msg_GoalStatusArray_max_key_cdr_typesize;
}

bool action_msgs::msg::GoalStatusArray::isKeyDefined()
{
    return false;
}

void action_msgs::msg::GoalStatusArray::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


