// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file GoalInfo.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "GoalInfo.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

#define builtin_interfaces_msg_Time_max_cdr_typesize 8ULL;
#define unique_identifier_msgs_msg_UUID_max_cdr_typesize 17ULL;

#define action_msgs_msg_GoalInfo_max_cdr_typesize 28ULL;
#define builtin_interfaces_msg_Time_max_key_cdr_typesize 0ULL;
#define unique_identifier_msgs_msg_UUID_max_key_cdr_typesize 0ULL;

#define action_msgs_msg_GoalInfo_max_key_cdr_typesize 0ULL;

action_msgs::msg::GoalInfo::GoalInfo()
{
    // unique_identifier_msgs::msg::UUID m_goal_id

    // builtin_interfaces::msg::Time m_stamp


}

action_msgs::msg::GoalInfo::~GoalInfo()
{


}

action_msgs::msg::GoalInfo::GoalInfo(
        const GoalInfo& x)
{
    m_goal_id = x.m_goal_id;
    m_stamp = x.m_stamp;
}

action_msgs::msg::GoalInfo::GoalInfo(
        GoalInfo&& x) noexcept 
{
    m_goal_id = std::move(x.m_goal_id);
    m_stamp = std::move(x.m_stamp);
}

action_msgs::msg::GoalInfo& action_msgs::msg::GoalInfo::operator =(
        const GoalInfo& x)
{

    m_goal_id = x.m_goal_id;
    m_stamp = x.m_stamp;

    return *this;
}

action_msgs::msg::GoalInfo& action_msgs::msg::GoalInfo::operator =(
        GoalInfo&& x) noexcept
{

    m_goal_id = std::move(x.m_goal_id);
    m_stamp = std::move(x.m_stamp);

    return *this;
}

bool action_msgs::msg::GoalInfo::operator ==(
        const GoalInfo& x) const
{

    return (m_goal_id == x.m_goal_id && m_stamp == x.m_stamp);
}

bool action_msgs::msg::GoalInfo::operator !=(
        const GoalInfo& x) const
{
    return !(*this == x);
}

size_t action_msgs::msg::GoalInfo::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return action_msgs_msg_GoalInfo_max_cdr_typesize;
}

size_t action_msgs::msg::GoalInfo::getCdrSerializedSize(
        const action_msgs::msg::GoalInfo& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += unique_identifier_msgs::msg::UUID::getCdrSerializedSize(data.goal_id(), current_alignment);
    current_alignment += builtin_interfaces::msg::Time::getCdrSerializedSize(data.stamp(), current_alignment);

    return current_alignment - initial_alignment;
}

void action_msgs::msg::GoalInfo::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_goal_id;
    scdr << m_stamp;

}

void action_msgs::msg::GoalInfo::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_goal_id;
    dcdr >> m_stamp;
}

/*!
 * @brief This function copies the value in member goal_id
 * @param _goal_id New value to be copied in member goal_id
 */
void action_msgs::msg::GoalInfo::goal_id(
        const unique_identifier_msgs::msg::UUID& _goal_id)
{
    m_goal_id = _goal_id;
}

/*!
 * @brief This function moves the value in member goal_id
 * @param _goal_id New value to be moved in member goal_id
 */
void action_msgs::msg::GoalInfo::goal_id(
        unique_identifier_msgs::msg::UUID&& _goal_id)
{
    m_goal_id = std::move(_goal_id);
}

/*!
 * @brief This function returns a constant reference to member goal_id
 * @return Constant reference to member goal_id
 */
const unique_identifier_msgs::msg::UUID& action_msgs::msg::GoalInfo::goal_id() const
{
    return m_goal_id;
}

/*!
 * @brief This function returns a reference to member goal_id
 * @return Reference to member goal_id
 */
unique_identifier_msgs::msg::UUID& action_msgs::msg::GoalInfo::goal_id()
{
    return m_goal_id;
}
/*!
 * @brief This function copies the value in member stamp
 * @param _stamp New value to be copied in member stamp
 */
void action_msgs::msg::GoalInfo::stamp(
        const builtin_interfaces::msg::Time& _stamp)
{
    m_stamp = _stamp;
}

/*!
 * @brief This function moves the value in member stamp
 * @param _stamp New value to be moved in member stamp
 */
void action_msgs::msg::GoalInfo::stamp(
        builtin_interfaces::msg::Time&& _stamp)
{
    m_stamp = std::move(_stamp);
}

/*!
 * @brief This function returns a constant reference to member stamp
 * @return Constant reference to member stamp
 */
const builtin_interfaces::msg::Time& action_msgs::msg::GoalInfo::stamp() const
{
    return m_stamp;
}

/*!
 * @brief This function returns a reference to member stamp
 * @return Reference to member stamp
 */
builtin_interfaces::msg::Time& action_msgs::msg::GoalInfo::stamp()
{
    return m_stamp;
}


size_t action_msgs::msg::GoalInfo::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return action_msgs_msg_GoalInfo_max_key_cdr_typesize;
}

bool action_msgs::msg::GoalInfo::isKeyDefined()
{
    return false;
}

void action_msgs::msg::GoalInfo::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


