// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file RotateAbsolute.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "RotateAbsolute.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

#define turtlesim_action_RotateAbsolute_Feedback_max_cdr_typesize 4ULL;
#define turtlesim_action_RotateAbsolute_Result_max_cdr_typesize 4ULL;
#define turtlesim_action_RotateAbsolute_Goal_max_cdr_typesize 4ULL;
#define turtlesim_action_RotateAbsolute_Feedback_max_key_cdr_typesize 0ULL;
#define turtlesim_action_RotateAbsolute_Result_max_key_cdr_typesize 0ULL;
#define turtlesim_action_RotateAbsolute_Goal_max_key_cdr_typesize 0ULL;

turtlesim::action::RotateAbsolute_Goal::RotateAbsolute_Goal()
{
    // float m_theta
    m_theta = 0.0;

}

turtlesim::action::RotateAbsolute_Goal::~RotateAbsolute_Goal()
{
}

turtlesim::action::RotateAbsolute_Goal::RotateAbsolute_Goal(
        const RotateAbsolute_Goal& x)
{
    m_theta = x.m_theta;
}

turtlesim::action::RotateAbsolute_Goal::RotateAbsolute_Goal(
        RotateAbsolute_Goal&& x) noexcept 
{
    m_theta = x.m_theta;
}

turtlesim::action::RotateAbsolute_Goal& turtlesim::action::RotateAbsolute_Goal::operator =(
        const RotateAbsolute_Goal& x)
{

    m_theta = x.m_theta;

    return *this;
}

turtlesim::action::RotateAbsolute_Goal& turtlesim::action::RotateAbsolute_Goal::operator =(
        RotateAbsolute_Goal&& x) noexcept
{

    m_theta = x.m_theta;

    return *this;
}

bool turtlesim::action::RotateAbsolute_Goal::operator ==(
        const RotateAbsolute_Goal& x) const
{

    return (m_theta == x.m_theta);
}

bool turtlesim::action::RotateAbsolute_Goal::operator !=(
        const RotateAbsolute_Goal& x) const
{
    return !(*this == x);
}

size_t turtlesim::action::RotateAbsolute_Goal::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return turtlesim_action_RotateAbsolute_Goal_max_cdr_typesize;
}

size_t turtlesim::action::RotateAbsolute_Goal::getCdrSerializedSize(
        const turtlesim::action::RotateAbsolute_Goal& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    return current_alignment - initial_alignment;
}

void turtlesim::action::RotateAbsolute_Goal::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_theta;

}

void turtlesim::action::RotateAbsolute_Goal::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_theta;
}

/*!
 * @brief This function sets a value in member theta
 * @param _theta New value for member theta
 */
void turtlesim::action::RotateAbsolute_Goal::theta(
        float _theta)
{
    m_theta = _theta;
}

/*!
 * @brief This function returns the value of member theta
 * @return Value of member theta
 */
float turtlesim::action::RotateAbsolute_Goal::theta() const
{
    return m_theta;
}

/*!
 * @brief This function returns a reference to member theta
 * @return Reference to member theta
 */
float& turtlesim::action::RotateAbsolute_Goal::theta()
{
    return m_theta;
}



size_t turtlesim::action::RotateAbsolute_Goal::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return turtlesim_action_RotateAbsolute_Goal_max_key_cdr_typesize;
}

bool turtlesim::action::RotateAbsolute_Goal::isKeyDefined()
{
    return false;
}

void turtlesim::action::RotateAbsolute_Goal::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}

turtlesim::action::RotateAbsolute_Result::RotateAbsolute_Result()
{
    // float m_delta
    m_delta = 0.0;

}

turtlesim::action::RotateAbsolute_Result::~RotateAbsolute_Result()
{
}

turtlesim::action::RotateAbsolute_Result::RotateAbsolute_Result(
        const RotateAbsolute_Result& x)
{
    m_delta = x.m_delta;
}

turtlesim::action::RotateAbsolute_Result::RotateAbsolute_Result(
        RotateAbsolute_Result&& x) noexcept 
{
    m_delta = x.m_delta;
}

turtlesim::action::RotateAbsolute_Result& turtlesim::action::RotateAbsolute_Result::operator =(
        const RotateAbsolute_Result& x)
{

    m_delta = x.m_delta;

    return *this;
}

turtlesim::action::RotateAbsolute_Result& turtlesim::action::RotateAbsolute_Result::operator =(
        RotateAbsolute_Result&& x) noexcept
{

    m_delta = x.m_delta;

    return *this;
}

bool turtlesim::action::RotateAbsolute_Result::operator ==(
        const RotateAbsolute_Result& x) const
{

    return (m_delta == x.m_delta);
}

bool turtlesim::action::RotateAbsolute_Result::operator !=(
        const RotateAbsolute_Result& x) const
{
    return !(*this == x);
}

size_t turtlesim::action::RotateAbsolute_Result::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return turtlesim_action_RotateAbsolute_Result_max_cdr_typesize;
}

size_t turtlesim::action::RotateAbsolute_Result::getCdrSerializedSize(
        const turtlesim::action::RotateAbsolute_Result& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    return current_alignment - initial_alignment;
}

void turtlesim::action::RotateAbsolute_Result::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_delta;

}

void turtlesim::action::RotateAbsolute_Result::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_delta;
}

/*!
 * @brief This function sets a value in member delta
 * @param _delta New value for member delta
 */
void turtlesim::action::RotateAbsolute_Result::delta(
        float _delta)
{
    m_delta = _delta;
}

/*!
 * @brief This function returns the value of member delta
 * @return Value of member delta
 */
float turtlesim::action::RotateAbsolute_Result::delta() const
{
    return m_delta;
}

/*!
 * @brief This function returns a reference to member delta
 * @return Reference to member delta
 */
float& turtlesim::action::RotateAbsolute_Result::delta()
{
    return m_delta;
}



size_t turtlesim::action::RotateAbsolute_Result::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return turtlesim_action_RotateAbsolute_Result_max_key_cdr_typesize;
}

bool turtlesim::action::RotateAbsolute_Result::isKeyDefined()
{
    return false;
}

void turtlesim::action::RotateAbsolute_Result::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}

turtlesim::action::RotateAbsolute_Feedback::RotateAbsolute_Feedback()
{
    // float m_remaining
    m_remaining = 0.0;

}

turtlesim::action::RotateAbsolute_Feedback::~RotateAbsolute_Feedback()
{
}

turtlesim::action::RotateAbsolute_Feedback::RotateAbsolute_Feedback(
        const RotateAbsolute_Feedback& x)
{
    m_remaining = x.m_remaining;
}

turtlesim::action::RotateAbsolute_Feedback::RotateAbsolute_Feedback(
        RotateAbsolute_Feedback&& x) noexcept 
{
    m_remaining = x.m_remaining;
}

turtlesim::action::RotateAbsolute_Feedback& turtlesim::action::RotateAbsolute_Feedback::operator =(
        const RotateAbsolute_Feedback& x)
{

    m_remaining = x.m_remaining;

    return *this;
}

turtlesim::action::RotateAbsolute_Feedback& turtlesim::action::RotateAbsolute_Feedback::operator =(
        RotateAbsolute_Feedback&& x) noexcept
{

    m_remaining = x.m_remaining;

    return *this;
}

bool turtlesim::action::RotateAbsolute_Feedback::operator ==(
        const RotateAbsolute_Feedback& x) const
{

    return (m_remaining == x.m_remaining);
}

bool turtlesim::action::RotateAbsolute_Feedback::operator !=(
        const RotateAbsolute_Feedback& x) const
{
    return !(*this == x);
}

size_t turtlesim::action::RotateAbsolute_Feedback::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return turtlesim_action_RotateAbsolute_Feedback_max_cdr_typesize;
}

size_t turtlesim::action::RotateAbsolute_Feedback::getCdrSerializedSize(
        const turtlesim::action::RotateAbsolute_Feedback& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    return current_alignment - initial_alignment;
}

void turtlesim::action::RotateAbsolute_Feedback::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_remaining;

}

void turtlesim::action::RotateAbsolute_Feedback::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_remaining;
}

/*!
 * @brief This function sets a value in member remaining
 * @param _remaining New value for member remaining
 */
void turtlesim::action::RotateAbsolute_Feedback::remaining(
        float _remaining)
{
    m_remaining = _remaining;
}

/*!
 * @brief This function returns the value of member remaining
 * @return Value of member remaining
 */
float turtlesim::action::RotateAbsolute_Feedback::remaining() const
{
    return m_remaining;
}

/*!
 * @brief This function returns a reference to member remaining
 * @return Reference to member remaining
 */
float& turtlesim::action::RotateAbsolute_Feedback::remaining()
{
    return m_remaining;
}



size_t turtlesim::action::RotateAbsolute_Feedback::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return turtlesim_action_RotateAbsolute_Feedback_max_key_cdr_typesize;
}

bool turtlesim::action::RotateAbsolute_Feedback::isKeyDefined()
{
    return false;
}

void turtlesim::action::RotateAbsolute_Feedback::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


