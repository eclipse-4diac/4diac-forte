// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file RotateAbsolute_action.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _FAST_DDS_GENERATED_TURTLESIM_ACTION_ROTATEABSOLUTE_ACTION_H_
#define _FAST_DDS_GENERATED_TURTLESIM_ACTION_ROTATEABSOLUTE_ACTION_H_

#include "UUID.h"
#include "Time.h"
#include "RotateAbsolute.h"

#include <fastrtps/utils/fixed_size_string.hpp>

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(RotateAbsolute_action_SOURCE)
#define RotateAbsolute_action_DllAPI __declspec( dllexport )
#else
#define RotateAbsolute_action_DllAPI __declspec( dllimport )
#endif // RotateAbsolute_action_SOURCE
#else
#define RotateAbsolute_action_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define RotateAbsolute_action_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima


namespace turtlesim {
    namespace action {
        /*!
         * @brief This class represents the structure RotateAbsolute_SendGoal_Request defined by the user in the IDL file.
         * @ingroup ROTATEABSOLUTE_ACTION
         */
        class RotateAbsolute_SendGoal_Request
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport RotateAbsolute_SendGoal_Request();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~RotateAbsolute_SendGoal_Request();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object turtlesim::action::RotateAbsolute_SendGoal_Request that will be copied.
             */
            eProsima_user_DllExport RotateAbsolute_SendGoal_Request(
                    const RotateAbsolute_SendGoal_Request& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object turtlesim::action::RotateAbsolute_SendGoal_Request that will be copied.
             */
            eProsima_user_DllExport RotateAbsolute_SendGoal_Request(
                    RotateAbsolute_SendGoal_Request&& x) noexcept;

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object turtlesim::action::RotateAbsolute_SendGoal_Request that will be copied.
             */
            eProsima_user_DllExport RotateAbsolute_SendGoal_Request& operator =(
                    const RotateAbsolute_SendGoal_Request& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object turtlesim::action::RotateAbsolute_SendGoal_Request that will be copied.
             */
            eProsima_user_DllExport RotateAbsolute_SendGoal_Request& operator =(
                    RotateAbsolute_SendGoal_Request&& x) noexcept;

            /*!
             * @brief Comparison operator.
             * @param x turtlesim::action::RotateAbsolute_SendGoal_Request object to compare.
             */
            eProsima_user_DllExport bool operator ==(
                    const RotateAbsolute_SendGoal_Request& x) const;

            /*!
             * @brief Comparison operator.
             * @param x turtlesim::action::RotateAbsolute_SendGoal_Request object to compare.
             */
            eProsima_user_DllExport bool operator !=(
                    const RotateAbsolute_SendGoal_Request& x) const;

            /*!
             * @brief This function copies the value in member goal_id
             * @param _goal_id New value to be copied in member goal_id
             */
            eProsima_user_DllExport void goal_id(
                    const unique_identifier_msgs::msg::UUID& _goal_id);

            /*!
             * @brief This function moves the value in member goal_id
             * @param _goal_id New value to be moved in member goal_id
             */
            eProsima_user_DllExport void goal_id(
                    unique_identifier_msgs::msg::UUID&& _goal_id);

            /*!
             * @brief This function returns a constant reference to member goal_id
             * @return Constant reference to member goal_id
             */
            eProsima_user_DllExport const unique_identifier_msgs::msg::UUID& goal_id() const;

            /*!
             * @brief This function returns a reference to member goal_id
             * @return Reference to member goal_id
             */
            eProsima_user_DllExport unique_identifier_msgs::msg::UUID& goal_id();
            /*!
             * @brief This function copies the value in member goal
             * @param _goal New value to be copied in member goal
             */
            eProsima_user_DllExport void goal(
                    const turtlesim::action::RotateAbsolute_Goal& _goal);

            /*!
             * @brief This function moves the value in member goal
             * @param _goal New value to be moved in member goal
             */
            eProsima_user_DllExport void goal(
                    turtlesim::action::RotateAbsolute_Goal&& _goal);

            /*!
             * @brief This function returns a constant reference to member goal
             * @return Constant reference to member goal
             */
            eProsima_user_DllExport const turtlesim::action::RotateAbsolute_Goal& goal() const;

            /*!
             * @brief This function returns a reference to member goal
             * @return Reference to member goal
             */
            eProsima_user_DllExport turtlesim::action::RotateAbsolute_Goal& goal();

            /*!
            * @brief This function returns the maximum serialized size of an object
            * depending on the buffer alignment.
            * @param current_alignment Buffer alignment.
            * @return Maximum serialized size.
            */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const turtlesim::action::RotateAbsolute_SendGoal_Request& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            unique_identifier_msgs::msg::UUID m_goal_id;
            turtlesim::action::RotateAbsolute_Goal m_goal;

        };
        /*!
         * @brief This class represents the structure RotateAbsolute_SendGoal_Response defined by the user in the IDL file.
         * @ingroup ROTATEABSOLUTE_ACTION
         */
        class RotateAbsolute_SendGoal_Response
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport RotateAbsolute_SendGoal_Response();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~RotateAbsolute_SendGoal_Response();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object turtlesim::action::RotateAbsolute_SendGoal_Response that will be copied.
             */
            eProsima_user_DllExport RotateAbsolute_SendGoal_Response(
                    const RotateAbsolute_SendGoal_Response& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object turtlesim::action::RotateAbsolute_SendGoal_Response that will be copied.
             */
            eProsima_user_DllExport RotateAbsolute_SendGoal_Response(
                    RotateAbsolute_SendGoal_Response&& x) noexcept;

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object turtlesim::action::RotateAbsolute_SendGoal_Response that will be copied.
             */
            eProsima_user_DllExport RotateAbsolute_SendGoal_Response& operator =(
                    const RotateAbsolute_SendGoal_Response& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object turtlesim::action::RotateAbsolute_SendGoal_Response that will be copied.
             */
            eProsima_user_DllExport RotateAbsolute_SendGoal_Response& operator =(
                    RotateAbsolute_SendGoal_Response&& x) noexcept;

            /*!
             * @brief Comparison operator.
             * @param x turtlesim::action::RotateAbsolute_SendGoal_Response object to compare.
             */
            eProsima_user_DllExport bool operator ==(
                    const RotateAbsolute_SendGoal_Response& x) const;

            /*!
             * @brief Comparison operator.
             * @param x turtlesim::action::RotateAbsolute_SendGoal_Response object to compare.
             */
            eProsima_user_DllExport bool operator !=(
                    const RotateAbsolute_SendGoal_Response& x) const;

            /*!
             * @brief This function sets a value in member accepted
             * @param _accepted New value for member accepted
             */
            eProsima_user_DllExport void accepted(
                    bool _accepted);

            /*!
             * @brief This function returns the value of member accepted
             * @return Value of member accepted
             */
            eProsima_user_DllExport bool accepted() const;

            /*!
             * @brief This function returns a reference to member accepted
             * @return Reference to member accepted
             */
            eProsima_user_DllExport bool& accepted();

            /*!
             * @brief This function copies the value in member stamp
             * @param _stamp New value to be copied in member stamp
             */
            eProsima_user_DllExport void stamp(
                    const builtin_interfaces::msg::Time& _stamp);

            /*!
             * @brief This function moves the value in member stamp
             * @param _stamp New value to be moved in member stamp
             */
            eProsima_user_DllExport void stamp(
                    builtin_interfaces::msg::Time&& _stamp);

            /*!
             * @brief This function returns a constant reference to member stamp
             * @return Constant reference to member stamp
             */
            eProsima_user_DllExport const builtin_interfaces::msg::Time& stamp() const;

            /*!
             * @brief This function returns a reference to member stamp
             * @return Reference to member stamp
             */
            eProsima_user_DllExport builtin_interfaces::msg::Time& stamp();

            /*!
            * @brief This function returns the maximum serialized size of an object
            * depending on the buffer alignment.
            * @param current_alignment Buffer alignment.
            * @return Maximum serialized size.
            */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const turtlesim::action::RotateAbsolute_SendGoal_Response& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            bool m_accepted;
            builtin_interfaces::msg::Time m_stamp;

        };
        /*!
         * @brief This class represents the structure RotateAbsolute_GetResult_Request defined by the user in the IDL file.
         * @ingroup ROTATEABSOLUTE_ACTION
         */
        class RotateAbsolute_GetResult_Request
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport RotateAbsolute_GetResult_Request();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~RotateAbsolute_GetResult_Request();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object turtlesim::action::RotateAbsolute_GetResult_Request that will be copied.
             */
            eProsima_user_DllExport RotateAbsolute_GetResult_Request(
                    const RotateAbsolute_GetResult_Request& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object turtlesim::action::RotateAbsolute_GetResult_Request that will be copied.
             */
            eProsima_user_DllExport RotateAbsolute_GetResult_Request(
                    RotateAbsolute_GetResult_Request&& x) noexcept;

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object turtlesim::action::RotateAbsolute_GetResult_Request that will be copied.
             */
            eProsima_user_DllExport RotateAbsolute_GetResult_Request& operator =(
                    const RotateAbsolute_GetResult_Request& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object turtlesim::action::RotateAbsolute_GetResult_Request that will be copied.
             */
            eProsima_user_DllExport RotateAbsolute_GetResult_Request& operator =(
                    RotateAbsolute_GetResult_Request&& x) noexcept;

            /*!
             * @brief Comparison operator.
             * @param x turtlesim::action::RotateAbsolute_GetResult_Request object to compare.
             */
            eProsima_user_DllExport bool operator ==(
                    const RotateAbsolute_GetResult_Request& x) const;

            /*!
             * @brief Comparison operator.
             * @param x turtlesim::action::RotateAbsolute_GetResult_Request object to compare.
             */
            eProsima_user_DllExport bool operator !=(
                    const RotateAbsolute_GetResult_Request& x) const;

            /*!
             * @brief This function copies the value in member goal_id
             * @param _goal_id New value to be copied in member goal_id
             */
            eProsima_user_DllExport void goal_id(
                    const unique_identifier_msgs::msg::UUID& _goal_id);

            /*!
             * @brief This function moves the value in member goal_id
             * @param _goal_id New value to be moved in member goal_id
             */
            eProsima_user_DllExport void goal_id(
                    unique_identifier_msgs::msg::UUID&& _goal_id);

            /*!
             * @brief This function returns a constant reference to member goal_id
             * @return Constant reference to member goal_id
             */
            eProsima_user_DllExport const unique_identifier_msgs::msg::UUID& goal_id() const;

            /*!
             * @brief This function returns a reference to member goal_id
             * @return Reference to member goal_id
             */
            eProsima_user_DllExport unique_identifier_msgs::msg::UUID& goal_id();

            /*!
            * @brief This function returns the maximum serialized size of an object
            * depending on the buffer alignment.
            * @param current_alignment Buffer alignment.
            * @return Maximum serialized size.
            */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const turtlesim::action::RotateAbsolute_GetResult_Request& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            unique_identifier_msgs::msg::UUID m_goal_id;

        };
        /*!
         * @brief This class represents the structure RotateAbsolute_GetResult_Response defined by the user in the IDL file.
         * @ingroup ROTATEABSOLUTE_ACTION
         */
        class RotateAbsolute_GetResult_Response
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport RotateAbsolute_GetResult_Response();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~RotateAbsolute_GetResult_Response();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object turtlesim::action::RotateAbsolute_GetResult_Response that will be copied.
             */
            eProsima_user_DllExport RotateAbsolute_GetResult_Response(
                    const RotateAbsolute_GetResult_Response& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object turtlesim::action::RotateAbsolute_GetResult_Response that will be copied.
             */
            eProsima_user_DllExport RotateAbsolute_GetResult_Response(
                    RotateAbsolute_GetResult_Response&& x) noexcept;

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object turtlesim::action::RotateAbsolute_GetResult_Response that will be copied.
             */
            eProsima_user_DllExport RotateAbsolute_GetResult_Response& operator =(
                    const RotateAbsolute_GetResult_Response& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object turtlesim::action::RotateAbsolute_GetResult_Response that will be copied.
             */
            eProsima_user_DllExport RotateAbsolute_GetResult_Response& operator =(
                    RotateAbsolute_GetResult_Response&& x) noexcept;

            /*!
             * @brief Comparison operator.
             * @param x turtlesim::action::RotateAbsolute_GetResult_Response object to compare.
             */
            eProsima_user_DllExport bool operator ==(
                    const RotateAbsolute_GetResult_Response& x) const;

            /*!
             * @brief Comparison operator.
             * @param x turtlesim::action::RotateAbsolute_GetResult_Response object to compare.
             */
            eProsima_user_DllExport bool operator !=(
                    const RotateAbsolute_GetResult_Response& x) const;

            /*!
             * @brief This function sets a value in member status
             * @param _status New value for member status
             */
            eProsima_user_DllExport void status(
                    int8_t _status);

            /*!
             * @brief This function returns the value of member status
             * @return Value of member status
             */
            eProsima_user_DllExport int8_t status() const;

            /*!
             * @brief This function returns a reference to member status
             * @return Reference to member status
             */
            eProsima_user_DllExport int8_t& status();

            /*!
             * @brief This function copies the value in member result
             * @param _result New value to be copied in member result
             */
            eProsima_user_DllExport void result(
                    const turtlesim::action::RotateAbsolute_Result& _result);

            /*!
             * @brief This function moves the value in member result
             * @param _result New value to be moved in member result
             */
            eProsima_user_DllExport void result(
                    turtlesim::action::RotateAbsolute_Result&& _result);

            /*!
             * @brief This function returns a constant reference to member result
             * @return Constant reference to member result
             */
            eProsima_user_DllExport const turtlesim::action::RotateAbsolute_Result& result() const;

            /*!
             * @brief This function returns a reference to member result
             * @return Reference to member result
             */
            eProsima_user_DllExport turtlesim::action::RotateAbsolute_Result& result();

            /*!
            * @brief This function returns the maximum serialized size of an object
            * depending on the buffer alignment.
            * @param current_alignment Buffer alignment.
            * @return Maximum serialized size.
            */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const turtlesim::action::RotateAbsolute_GetResult_Response& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            int8_t m_status;
            turtlesim::action::RotateAbsolute_Result m_result;

        };
        /*!
         * @brief This class represents the structure RotateAbsolute_FeedbackMessage defined by the user in the IDL file.
         * @ingroup ROTATEABSOLUTE_ACTION
         */
        class RotateAbsolute_FeedbackMessage
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport RotateAbsolute_FeedbackMessage();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~RotateAbsolute_FeedbackMessage();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object turtlesim::action::RotateAbsolute_FeedbackMessage that will be copied.
             */
            eProsima_user_DllExport RotateAbsolute_FeedbackMessage(
                    const RotateAbsolute_FeedbackMessage& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object turtlesim::action::RotateAbsolute_FeedbackMessage that will be copied.
             */
            eProsima_user_DllExport RotateAbsolute_FeedbackMessage(
                    RotateAbsolute_FeedbackMessage&& x) noexcept;

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object turtlesim::action::RotateAbsolute_FeedbackMessage that will be copied.
             */
            eProsima_user_DllExport RotateAbsolute_FeedbackMessage& operator =(
                    const RotateAbsolute_FeedbackMessage& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object turtlesim::action::RotateAbsolute_FeedbackMessage that will be copied.
             */
            eProsima_user_DllExport RotateAbsolute_FeedbackMessage& operator =(
                    RotateAbsolute_FeedbackMessage&& x) noexcept;

            /*!
             * @brief Comparison operator.
             * @param x turtlesim::action::RotateAbsolute_FeedbackMessage object to compare.
             */
            eProsima_user_DllExport bool operator ==(
                    const RotateAbsolute_FeedbackMessage& x) const;

            /*!
             * @brief Comparison operator.
             * @param x turtlesim::action::RotateAbsolute_FeedbackMessage object to compare.
             */
            eProsima_user_DllExport bool operator !=(
                    const RotateAbsolute_FeedbackMessage& x) const;

            /*!
             * @brief This function copies the value in member goal_id
             * @param _goal_id New value to be copied in member goal_id
             */
            eProsima_user_DllExport void goal_id(
                    const unique_identifier_msgs::msg::UUID& _goal_id);

            /*!
             * @brief This function moves the value in member goal_id
             * @param _goal_id New value to be moved in member goal_id
             */
            eProsima_user_DllExport void goal_id(
                    unique_identifier_msgs::msg::UUID&& _goal_id);

            /*!
             * @brief This function returns a constant reference to member goal_id
             * @return Constant reference to member goal_id
             */
            eProsima_user_DllExport const unique_identifier_msgs::msg::UUID& goal_id() const;

            /*!
             * @brief This function returns a reference to member goal_id
             * @return Reference to member goal_id
             */
            eProsima_user_DllExport unique_identifier_msgs::msg::UUID& goal_id();
            /*!
             * @brief This function copies the value in member feedback
             * @param _feedback New value to be copied in member feedback
             */
            eProsima_user_DllExport void feedback(
                    const turtlesim::action::RotateAbsolute_Feedback& _feedback);

            /*!
             * @brief This function moves the value in member feedback
             * @param _feedback New value to be moved in member feedback
             */
            eProsima_user_DllExport void feedback(
                    turtlesim::action::RotateAbsolute_Feedback&& _feedback);

            /*!
             * @brief This function returns a constant reference to member feedback
             * @return Constant reference to member feedback
             */
            eProsima_user_DllExport const turtlesim::action::RotateAbsolute_Feedback& feedback() const;

            /*!
             * @brief This function returns a reference to member feedback
             * @return Reference to member feedback
             */
            eProsima_user_DllExport turtlesim::action::RotateAbsolute_Feedback& feedback();

            /*!
            * @brief This function returns the maximum serialized size of an object
            * depending on the buffer alignment.
            * @param current_alignment Buffer alignment.
            * @return Maximum serialized size.
            */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const turtlesim::action::RotateAbsolute_FeedbackMessage& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            unique_identifier_msgs::msg::UUID m_goal_id;
            turtlesim::action::RotateAbsolute_Feedback m_feedback;

        };
    } // namespace action
} // namespace turtlesim

#endif // _FAST_DDS_GENERATED_TURTLESIM_ACTION_ROTATEABSOLUTE_ACTION_H_