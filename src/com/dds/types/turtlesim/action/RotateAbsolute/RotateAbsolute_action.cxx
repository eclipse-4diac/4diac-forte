// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file RotateAbsolute_action.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "RotateAbsolute_action.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

#define builtin_interfaces_msg_Time_max_cdr_typesize 8ULL;
#define turtlesim_action_RotateAbsolute_Feedback_max_cdr_typesize 4ULL;
#define unique_identifier_msgs_msg_UUID_max_cdr_typesize 17ULL;
#define turtlesim_action_RotateAbsolute_SendGoal_Response_max_cdr_typesize 12ULL;
#define turtlesim_action_RotateAbsolute_FeedbackMessage_max_cdr_typesize 24ULL;
#define turtlesim_action_RotateAbsolute_GetResult_Request_max_cdr_typesize 17ULL;

#define turtlesim_action_RotateAbsolute_GetResult_Response_max_cdr_typesize 8ULL;
#define turtlesim_action_RotateAbsolute_Result_max_cdr_typesize 4ULL;
#define turtlesim_action_RotateAbsolute_Goal_max_cdr_typesize 4ULL;
#define turtlesim_action_RotateAbsolute_SendGoal_Request_max_cdr_typesize 24ULL;
#define builtin_interfaces_msg_Time_max_key_cdr_typesize 0ULL;
#define turtlesim_action_RotateAbsolute_Feedback_max_key_cdr_typesize 0ULL;
#define unique_identifier_msgs_msg_UUID_max_key_cdr_typesize 0ULL;
#define turtlesim_action_RotateAbsolute_SendGoal_Response_max_key_cdr_typesize 0ULL;
#define turtlesim_action_RotateAbsolute_FeedbackMessage_max_key_cdr_typesize 0ULL;
#define turtlesim_action_RotateAbsolute_GetResult_Request_max_key_cdr_typesize 0ULL;

#define turtlesim_action_RotateAbsolute_GetResult_Response_max_key_cdr_typesize 0ULL;
#define turtlesim_action_RotateAbsolute_Result_max_key_cdr_typesize 0ULL;
#define turtlesim_action_RotateAbsolute_Goal_max_key_cdr_typesize 0ULL;
#define turtlesim_action_RotateAbsolute_SendGoal_Request_max_key_cdr_typesize 0ULL;

turtlesim::action::RotateAbsolute_SendGoal_Request::RotateAbsolute_SendGoal_Request()
{
    // unique_identifier_msgs::msg::UUID m_goal_id

    // turtlesim::action::RotateAbsolute_Goal m_goal


}

turtlesim::action::RotateAbsolute_SendGoal_Request::~RotateAbsolute_SendGoal_Request()
{


}

turtlesim::action::RotateAbsolute_SendGoal_Request::RotateAbsolute_SendGoal_Request(
        const RotateAbsolute_SendGoal_Request& x)
{
    m_goal_id = x.m_goal_id;
    m_goal = x.m_goal;
}

turtlesim::action::RotateAbsolute_SendGoal_Request::RotateAbsolute_SendGoal_Request(
        RotateAbsolute_SendGoal_Request&& x) noexcept 
{
    m_goal_id = std::move(x.m_goal_id);
    m_goal = std::move(x.m_goal);
}

turtlesim::action::RotateAbsolute_SendGoal_Request& turtlesim::action::RotateAbsolute_SendGoal_Request::operator =(
        const RotateAbsolute_SendGoal_Request& x)
{

    m_goal_id = x.m_goal_id;
    m_goal = x.m_goal;

    return *this;
}

turtlesim::action::RotateAbsolute_SendGoal_Request& turtlesim::action::RotateAbsolute_SendGoal_Request::operator =(
        RotateAbsolute_SendGoal_Request&& x) noexcept
{

    m_goal_id = std::move(x.m_goal_id);
    m_goal = std::move(x.m_goal);

    return *this;
}

bool turtlesim::action::RotateAbsolute_SendGoal_Request::operator ==(
        const RotateAbsolute_SendGoal_Request& x) const
{

    return (m_goal_id == x.m_goal_id && m_goal == x.m_goal);
}

bool turtlesim::action::RotateAbsolute_SendGoal_Request::operator !=(
        const RotateAbsolute_SendGoal_Request& x) const
{
    return !(*this == x);
}

size_t turtlesim::action::RotateAbsolute_SendGoal_Request::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return turtlesim_action_RotateAbsolute_SendGoal_Request_max_cdr_typesize;
}

size_t turtlesim::action::RotateAbsolute_SendGoal_Request::getCdrSerializedSize(
        const turtlesim::action::RotateAbsolute_SendGoal_Request& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += unique_identifier_msgs::msg::UUID::getCdrSerializedSize(data.goal_id(), current_alignment);
    current_alignment += turtlesim::action::RotateAbsolute_Goal::getCdrSerializedSize(data.goal(), current_alignment);

    return current_alignment - initial_alignment;
}

void turtlesim::action::RotateAbsolute_SendGoal_Request::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_goal_id;
    scdr << m_goal;

}

void turtlesim::action::RotateAbsolute_SendGoal_Request::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_goal_id;
    dcdr >> m_goal;
}

/*!
 * @brief This function copies the value in member goal_id
 * @param _goal_id New value to be copied in member goal_id
 */
void turtlesim::action::RotateAbsolute_SendGoal_Request::goal_id(
        const unique_identifier_msgs::msg::UUID& _goal_id)
{
    m_goal_id = _goal_id;
}

/*!
 * @brief This function moves the value in member goal_id
 * @param _goal_id New value to be moved in member goal_id
 */
void turtlesim::action::RotateAbsolute_SendGoal_Request::goal_id(
        unique_identifier_msgs::msg::UUID&& _goal_id)
{
    m_goal_id = std::move(_goal_id);
}

/*!
 * @brief This function returns a constant reference to member goal_id
 * @return Constant reference to member goal_id
 */
const unique_identifier_msgs::msg::UUID& turtlesim::action::RotateAbsolute_SendGoal_Request::goal_id() const
{
    return m_goal_id;
}

/*!
 * @brief This function returns a reference to member goal_id
 * @return Reference to member goal_id
 */
unique_identifier_msgs::msg::UUID& turtlesim::action::RotateAbsolute_SendGoal_Request::goal_id()
{
    return m_goal_id;
}
/*!
 * @brief This function copies the value in member goal
 * @param _goal New value to be copied in member goal
 */
void turtlesim::action::RotateAbsolute_SendGoal_Request::goal(
        const turtlesim::action::RotateAbsolute_Goal& _goal)
{
    m_goal = _goal;
}

/*!
 * @brief This function moves the value in member goal
 * @param _goal New value to be moved in member goal
 */
void turtlesim::action::RotateAbsolute_SendGoal_Request::goal(
        turtlesim::action::RotateAbsolute_Goal&& _goal)
{
    m_goal = std::move(_goal);
}

/*!
 * @brief This function returns a constant reference to member goal
 * @return Constant reference to member goal
 */
const turtlesim::action::RotateAbsolute_Goal& turtlesim::action::RotateAbsolute_SendGoal_Request::goal() const
{
    return m_goal;
}

/*!
 * @brief This function returns a reference to member goal
 * @return Reference to member goal
 */
turtlesim::action::RotateAbsolute_Goal& turtlesim::action::RotateAbsolute_SendGoal_Request::goal()
{
    return m_goal;
}


size_t turtlesim::action::RotateAbsolute_SendGoal_Request::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return turtlesim_action_RotateAbsolute_SendGoal_Request_max_key_cdr_typesize;
}

bool turtlesim::action::RotateAbsolute_SendGoal_Request::isKeyDefined()
{
    return false;
}

void turtlesim::action::RotateAbsolute_SendGoal_Request::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}

turtlesim::action::RotateAbsolute_SendGoal_Response::RotateAbsolute_SendGoal_Response()
{
    // boolean m_accepted
    m_accepted = false;
    // builtin_interfaces::msg::Time m_stamp


}

turtlesim::action::RotateAbsolute_SendGoal_Response::~RotateAbsolute_SendGoal_Response()
{


}

turtlesim::action::RotateAbsolute_SendGoal_Response::RotateAbsolute_SendGoal_Response(
        const RotateAbsolute_SendGoal_Response& x)
{
    m_accepted = x.m_accepted;
    m_stamp = x.m_stamp;
}

turtlesim::action::RotateAbsolute_SendGoal_Response::RotateAbsolute_SendGoal_Response(
        RotateAbsolute_SendGoal_Response&& x) noexcept 
{
    m_accepted = x.m_accepted;
    m_stamp = std::move(x.m_stamp);
}

turtlesim::action::RotateAbsolute_SendGoal_Response& turtlesim::action::RotateAbsolute_SendGoal_Response::operator =(
        const RotateAbsolute_SendGoal_Response& x)
{

    m_accepted = x.m_accepted;
    m_stamp = x.m_stamp;

    return *this;
}

turtlesim::action::RotateAbsolute_SendGoal_Response& turtlesim::action::RotateAbsolute_SendGoal_Response::operator =(
        RotateAbsolute_SendGoal_Response&& x) noexcept
{

    m_accepted = x.m_accepted;
    m_stamp = std::move(x.m_stamp);

    return *this;
}

bool turtlesim::action::RotateAbsolute_SendGoal_Response::operator ==(
        const RotateAbsolute_SendGoal_Response& x) const
{

    return (m_accepted == x.m_accepted && m_stamp == x.m_stamp);
}

bool turtlesim::action::RotateAbsolute_SendGoal_Response::operator !=(
        const RotateAbsolute_SendGoal_Response& x) const
{
    return !(*this == x);
}

size_t turtlesim::action::RotateAbsolute_SendGoal_Response::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return turtlesim_action_RotateAbsolute_SendGoal_Response_max_cdr_typesize;
}

size_t turtlesim::action::RotateAbsolute_SendGoal_Response::getCdrSerializedSize(
        const turtlesim::action::RotateAbsolute_SendGoal_Response& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += builtin_interfaces::msg::Time::getCdrSerializedSize(data.stamp(), current_alignment);

    return current_alignment - initial_alignment;
}

void turtlesim::action::RotateAbsolute_SendGoal_Response::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_accepted;
    scdr << m_stamp;

}

void turtlesim::action::RotateAbsolute_SendGoal_Response::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_accepted;
    dcdr >> m_stamp;
}

/*!
 * @brief This function sets a value in member accepted
 * @param _accepted New value for member accepted
 */
void turtlesim::action::RotateAbsolute_SendGoal_Response::accepted(
        bool _accepted)
{
    m_accepted = _accepted;
}

/*!
 * @brief This function returns the value of member accepted
 * @return Value of member accepted
 */
bool turtlesim::action::RotateAbsolute_SendGoal_Response::accepted() const
{
    return m_accepted;
}

/*!
 * @brief This function returns a reference to member accepted
 * @return Reference to member accepted
 */
bool& turtlesim::action::RotateAbsolute_SendGoal_Response::accepted()
{
    return m_accepted;
}

/*!
 * @brief This function copies the value in member stamp
 * @param _stamp New value to be copied in member stamp
 */
void turtlesim::action::RotateAbsolute_SendGoal_Response::stamp(
        const builtin_interfaces::msg::Time& _stamp)
{
    m_stamp = _stamp;
}

/*!
 * @brief This function moves the value in member stamp
 * @param _stamp New value to be moved in member stamp
 */
void turtlesim::action::RotateAbsolute_SendGoal_Response::stamp(
        builtin_interfaces::msg::Time&& _stamp)
{
    m_stamp = std::move(_stamp);
}

/*!
 * @brief This function returns a constant reference to member stamp
 * @return Constant reference to member stamp
 */
const builtin_interfaces::msg::Time& turtlesim::action::RotateAbsolute_SendGoal_Response::stamp() const
{
    return m_stamp;
}

/*!
 * @brief This function returns a reference to member stamp
 * @return Reference to member stamp
 */
builtin_interfaces::msg::Time& turtlesim::action::RotateAbsolute_SendGoal_Response::stamp()
{
    return m_stamp;
}


size_t turtlesim::action::RotateAbsolute_SendGoal_Response::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return turtlesim_action_RotateAbsolute_SendGoal_Response_max_key_cdr_typesize;
}

bool turtlesim::action::RotateAbsolute_SendGoal_Response::isKeyDefined()
{
    return false;
}

void turtlesim::action::RotateAbsolute_SendGoal_Response::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}

turtlesim::action::RotateAbsolute_GetResult_Request::RotateAbsolute_GetResult_Request()
{
    // unique_identifier_msgs::msg::UUID m_goal_id


}

turtlesim::action::RotateAbsolute_GetResult_Request::~RotateAbsolute_GetResult_Request()
{
}

turtlesim::action::RotateAbsolute_GetResult_Request::RotateAbsolute_GetResult_Request(
        const RotateAbsolute_GetResult_Request& x)
{
    m_goal_id = x.m_goal_id;
}

turtlesim::action::RotateAbsolute_GetResult_Request::RotateAbsolute_GetResult_Request(
        RotateAbsolute_GetResult_Request&& x) noexcept 
{
    m_goal_id = std::move(x.m_goal_id);
}

turtlesim::action::RotateAbsolute_GetResult_Request& turtlesim::action::RotateAbsolute_GetResult_Request::operator =(
        const RotateAbsolute_GetResult_Request& x)
{

    m_goal_id = x.m_goal_id;

    return *this;
}

turtlesim::action::RotateAbsolute_GetResult_Request& turtlesim::action::RotateAbsolute_GetResult_Request::operator =(
        RotateAbsolute_GetResult_Request&& x) noexcept
{

    m_goal_id = std::move(x.m_goal_id);

    return *this;
}

bool turtlesim::action::RotateAbsolute_GetResult_Request::operator ==(
        const RotateAbsolute_GetResult_Request& x) const
{

    return (m_goal_id == x.m_goal_id);
}

bool turtlesim::action::RotateAbsolute_GetResult_Request::operator !=(
        const RotateAbsolute_GetResult_Request& x) const
{
    return !(*this == x);
}

size_t turtlesim::action::RotateAbsolute_GetResult_Request::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return turtlesim_action_RotateAbsolute_GetResult_Request_max_cdr_typesize;
}

size_t turtlesim::action::RotateAbsolute_GetResult_Request::getCdrSerializedSize(
        const turtlesim::action::RotateAbsolute_GetResult_Request& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += unique_identifier_msgs::msg::UUID::getCdrSerializedSize(data.goal_id(), current_alignment);

    return current_alignment - initial_alignment;
}

void turtlesim::action::RotateAbsolute_GetResult_Request::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_goal_id;

}

void turtlesim::action::RotateAbsolute_GetResult_Request::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_goal_id;
}

/*!
 * @brief This function copies the value in member goal_id
 * @param _goal_id New value to be copied in member goal_id
 */
void turtlesim::action::RotateAbsolute_GetResult_Request::goal_id(
        const unique_identifier_msgs::msg::UUID& _goal_id)
{
    m_goal_id = _goal_id;
}

/*!
 * @brief This function moves the value in member goal_id
 * @param _goal_id New value to be moved in member goal_id
 */
void turtlesim::action::RotateAbsolute_GetResult_Request::goal_id(
        unique_identifier_msgs::msg::UUID&& _goal_id)
{
    m_goal_id = std::move(_goal_id);
}

/*!
 * @brief This function returns a constant reference to member goal_id
 * @return Constant reference to member goal_id
 */
const unique_identifier_msgs::msg::UUID& turtlesim::action::RotateAbsolute_GetResult_Request::goal_id() const
{
    return m_goal_id;
}

/*!
 * @brief This function returns a reference to member goal_id
 * @return Reference to member goal_id
 */
unique_identifier_msgs::msg::UUID& turtlesim::action::RotateAbsolute_GetResult_Request::goal_id()
{
    return m_goal_id;
}


size_t turtlesim::action::RotateAbsolute_GetResult_Request::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return turtlesim_action_RotateAbsolute_GetResult_Request_max_key_cdr_typesize;
}

bool turtlesim::action::RotateAbsolute_GetResult_Request::isKeyDefined()
{
    return false;
}

void turtlesim::action::RotateAbsolute_GetResult_Request::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}

turtlesim::action::RotateAbsolute_GetResult_Response::RotateAbsolute_GetResult_Response()
{
    // int8 m_status
    m_status = 0;
    // turtlesim::action::RotateAbsolute_Result m_result


}

turtlesim::action::RotateAbsolute_GetResult_Response::~RotateAbsolute_GetResult_Response()
{


}

turtlesim::action::RotateAbsolute_GetResult_Response::RotateAbsolute_GetResult_Response(
        const RotateAbsolute_GetResult_Response& x)
{
    m_status = x.m_status;
    m_result = x.m_result;
}

turtlesim::action::RotateAbsolute_GetResult_Response::RotateAbsolute_GetResult_Response(
        RotateAbsolute_GetResult_Response&& x) noexcept 
{
    m_status = x.m_status;
    m_result = std::move(x.m_result);
}

turtlesim::action::RotateAbsolute_GetResult_Response& turtlesim::action::RotateAbsolute_GetResult_Response::operator =(
        const RotateAbsolute_GetResult_Response& x)
{

    m_status = x.m_status;
    m_result = x.m_result;

    return *this;
}

turtlesim::action::RotateAbsolute_GetResult_Response& turtlesim::action::RotateAbsolute_GetResult_Response::operator =(
        RotateAbsolute_GetResult_Response&& x) noexcept
{

    m_status = x.m_status;
    m_result = std::move(x.m_result);

    return *this;
}

bool turtlesim::action::RotateAbsolute_GetResult_Response::operator ==(
        const RotateAbsolute_GetResult_Response& x) const
{

    return (m_status == x.m_status && m_result == x.m_result);
}

bool turtlesim::action::RotateAbsolute_GetResult_Response::operator !=(
        const RotateAbsolute_GetResult_Response& x) const
{
    return !(*this == x);
}

size_t turtlesim::action::RotateAbsolute_GetResult_Response::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return turtlesim_action_RotateAbsolute_GetResult_Response_max_cdr_typesize;
}

size_t turtlesim::action::RotateAbsolute_GetResult_Response::getCdrSerializedSize(
        const turtlesim::action::RotateAbsolute_GetResult_Response& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += turtlesim::action::RotateAbsolute_Result::getCdrSerializedSize(data.result(), current_alignment);

    return current_alignment - initial_alignment;
}

void turtlesim::action::RotateAbsolute_GetResult_Response::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_status;
    scdr << m_result;

}

void turtlesim::action::RotateAbsolute_GetResult_Response::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_status;
    dcdr >> m_result;
}

/*!
 * @brief This function sets a value in member status
 * @param _status New value for member status
 */
void turtlesim::action::RotateAbsolute_GetResult_Response::status(
        int8_t _status)
{
    m_status = _status;
}

/*!
 * @brief This function returns the value of member status
 * @return Value of member status
 */
int8_t turtlesim::action::RotateAbsolute_GetResult_Response::status() const
{
    return m_status;
}

/*!
 * @brief This function returns a reference to member status
 * @return Reference to member status
 */
int8_t& turtlesim::action::RotateAbsolute_GetResult_Response::status()
{
    return m_status;
}

/*!
 * @brief This function copies the value in member result
 * @param _result New value to be copied in member result
 */
void turtlesim::action::RotateAbsolute_GetResult_Response::result(
        const turtlesim::action::RotateAbsolute_Result& _result)
{
    m_result = _result;
}

/*!
 * @brief This function moves the value in member result
 * @param _result New value to be moved in member result
 */
void turtlesim::action::RotateAbsolute_GetResult_Response::result(
        turtlesim::action::RotateAbsolute_Result&& _result)
{
    m_result = std::move(_result);
}

/*!
 * @brief This function returns a constant reference to member result
 * @return Constant reference to member result
 */
const turtlesim::action::RotateAbsolute_Result& turtlesim::action::RotateAbsolute_GetResult_Response::result() const
{
    return m_result;
}

/*!
 * @brief This function returns a reference to member result
 * @return Reference to member result
 */
turtlesim::action::RotateAbsolute_Result& turtlesim::action::RotateAbsolute_GetResult_Response::result()
{
    return m_result;
}


size_t turtlesim::action::RotateAbsolute_GetResult_Response::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return turtlesim_action_RotateAbsolute_GetResult_Response_max_key_cdr_typesize;
}

bool turtlesim::action::RotateAbsolute_GetResult_Response::isKeyDefined()
{
    return false;
}

void turtlesim::action::RotateAbsolute_GetResult_Response::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}

turtlesim::action::RotateAbsolute_FeedbackMessage::RotateAbsolute_FeedbackMessage()
{
    // unique_identifier_msgs::msg::UUID m_goal_id

    // turtlesim::action::RotateAbsolute_Feedback m_feedback


}

turtlesim::action::RotateAbsolute_FeedbackMessage::~RotateAbsolute_FeedbackMessage()
{


}

turtlesim::action::RotateAbsolute_FeedbackMessage::RotateAbsolute_FeedbackMessage(
        const RotateAbsolute_FeedbackMessage& x)
{
    m_goal_id = x.m_goal_id;
    m_feedback = x.m_feedback;
}

turtlesim::action::RotateAbsolute_FeedbackMessage::RotateAbsolute_FeedbackMessage(
        RotateAbsolute_FeedbackMessage&& x) noexcept 
{
    m_goal_id = std::move(x.m_goal_id);
    m_feedback = std::move(x.m_feedback);
}

turtlesim::action::RotateAbsolute_FeedbackMessage& turtlesim::action::RotateAbsolute_FeedbackMessage::operator =(
        const RotateAbsolute_FeedbackMessage& x)
{

    m_goal_id = x.m_goal_id;
    m_feedback = x.m_feedback;

    return *this;
}

turtlesim::action::RotateAbsolute_FeedbackMessage& turtlesim::action::RotateAbsolute_FeedbackMessage::operator =(
        RotateAbsolute_FeedbackMessage&& x) noexcept
{

    m_goal_id = std::move(x.m_goal_id);
    m_feedback = std::move(x.m_feedback);

    return *this;
}

bool turtlesim::action::RotateAbsolute_FeedbackMessage::operator ==(
        const RotateAbsolute_FeedbackMessage& x) const
{

    return (m_goal_id == x.m_goal_id && m_feedback == x.m_feedback);
}

bool turtlesim::action::RotateAbsolute_FeedbackMessage::operator !=(
        const RotateAbsolute_FeedbackMessage& x) const
{
    return !(*this == x);
}

size_t turtlesim::action::RotateAbsolute_FeedbackMessage::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return turtlesim_action_RotateAbsolute_FeedbackMessage_max_cdr_typesize;
}

size_t turtlesim::action::RotateAbsolute_FeedbackMessage::getCdrSerializedSize(
        const turtlesim::action::RotateAbsolute_FeedbackMessage& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += unique_identifier_msgs::msg::UUID::getCdrSerializedSize(data.goal_id(), current_alignment);
    current_alignment += turtlesim::action::RotateAbsolute_Feedback::getCdrSerializedSize(data.feedback(), current_alignment);

    return current_alignment - initial_alignment;
}

void turtlesim::action::RotateAbsolute_FeedbackMessage::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_goal_id;
    scdr << m_feedback;

}

void turtlesim::action::RotateAbsolute_FeedbackMessage::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_goal_id;
    dcdr >> m_feedback;
}

/*!
 * @brief This function copies the value in member goal_id
 * @param _goal_id New value to be copied in member goal_id
 */
void turtlesim::action::RotateAbsolute_FeedbackMessage::goal_id(
        const unique_identifier_msgs::msg::UUID& _goal_id)
{
    m_goal_id = _goal_id;
}

/*!
 * @brief This function moves the value in member goal_id
 * @param _goal_id New value to be moved in member goal_id
 */
void turtlesim::action::RotateAbsolute_FeedbackMessage::goal_id(
        unique_identifier_msgs::msg::UUID&& _goal_id)
{
    m_goal_id = std::move(_goal_id);
}

/*!
 * @brief This function returns a constant reference to member goal_id
 * @return Constant reference to member goal_id
 */
const unique_identifier_msgs::msg::UUID& turtlesim::action::RotateAbsolute_FeedbackMessage::goal_id() const
{
    return m_goal_id;
}

/*!
 * @brief This function returns a reference to member goal_id
 * @return Reference to member goal_id
 */
unique_identifier_msgs::msg::UUID& turtlesim::action::RotateAbsolute_FeedbackMessage::goal_id()
{
    return m_goal_id;
}
/*!
 * @brief This function copies the value in member feedback
 * @param _feedback New value to be copied in member feedback
 */
void turtlesim::action::RotateAbsolute_FeedbackMessage::feedback(
        const turtlesim::action::RotateAbsolute_Feedback& _feedback)
{
    m_feedback = _feedback;
}

/*!
 * @brief This function moves the value in member feedback
 * @param _feedback New value to be moved in member feedback
 */
void turtlesim::action::RotateAbsolute_FeedbackMessage::feedback(
        turtlesim::action::RotateAbsolute_Feedback&& _feedback)
{
    m_feedback = std::move(_feedback);
}

/*!
 * @brief This function returns a constant reference to member feedback
 * @return Constant reference to member feedback
 */
const turtlesim::action::RotateAbsolute_Feedback& turtlesim::action::RotateAbsolute_FeedbackMessage::feedback() const
{
    return m_feedback;
}

/*!
 * @brief This function returns a reference to member feedback
 * @return Reference to member feedback
 */
turtlesim::action::RotateAbsolute_Feedback& turtlesim::action::RotateAbsolute_FeedbackMessage::feedback()
{
    return m_feedback;
}


size_t turtlesim::action::RotateAbsolute_FeedbackMessage::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return turtlesim_action_RotateAbsolute_FeedbackMessage_max_key_cdr_typesize;
}

bool turtlesim::action::RotateAbsolute_FeedbackMessage::isKeyDefined()
{
    return false;
}

void turtlesim::action::RotateAbsolute_FeedbackMessage::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


